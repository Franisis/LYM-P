/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap; 
@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<ROBOT:  "ROBOT_R">
		| 	<VARS: "VARS">
		| 	<PROCS: "PROCS">
		|   <assign : "assignTo" >
		|   <goto1 : "goto" >
	    |   <move: "move" >
	    |   <turn: "turn" >
	    |   <face: "face" >
	    |   <put: "put" >
	    |   <pick: "pick" >
	    |   <moveToThe: "moveToThe" >
	    |   <moveInDir: "moveInDir" >
	    |   <jumpToThe: "jumpToThe" >
	    |   <jumpInDir: "jumpInDir" >
	    |   <VARIABLEDEF: "|" >
	    |   <nop: "nop" >
	    
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		| <VARIABLE : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(
		  (
		   < ROBOT > { salida="Inicio del programa";}(vars())?
		   < PROCS >procs(){ salida="Proceso completado";}
		   
		   
		)  

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}


	void vars() :
	{}
	{
	  < VARS >< VARIABLE >(","< VARIABLE >)* ";" { salida="Creacion de variables";}
	}
	void procs() :
	{Token varName;
	ArrayList<String> funciones = new ArrayList<String>();
	HashMap<String, String> cuerpofunciones = new HashMap<String, String>();
	Token cuerpo;}
	{
	  varName=< VARIABLE> "[" body()"]" { funciones.add(varName.image); }
	  (varName=< VARIABLE> "[" body()"]" { funciones.add(varName.image); })*
	{}
     }
    void body() :
    { Token newparam;
      Token cuerpo;
      ArrayList<String> parametros = new ArrayList<String>();
      HashMap<String, String> cuerpofunciones = new HashMap<String, String>();}
    {
		
		< VARIABLEDEF >(newparam=< VARIABLE>{parametros.add(newparam.image);})? 
		("," newparam=< VARIABLE>{parametros.add(newparam.image);})*
		< VARIABLEDEF > { salida="Parametros del proceso";}
		((goto1())|(move())|(face())
		|turn()| put()| pick())*
		/*
		| pick()*
		| moveToThe()*
		| moveInDir()*
		| jumpToThe()*
		| jumpInDir()*
		| not()*
		*/ 
    }
    void goto1():
    { int x,y ;}
    {
		< goto1 >":" x=num()","y=num()";"
		{world.setPostion(x,y);salida="Comando cambio posicion" ;}
    }
    void move():
    { int n;}
    {
		< move >":" n=num()";"
		{world.moveForward(n,false);salida="Comando de mover hacia adelante";}
    }
    void turn():
    { Token direction;
      String dirc;}
    {
      < turn >":"direction= < VARIABLE >";"
      {
        salida=direction.image;
        if (direction.image.equals( "right"))
        {
          
          world.turnRight();
          salida= "se movio a la derecha";
         }
         else if (direction.image.equals( "left"))
         {
			world.turnRight();
			world.turnRight();
			world.turnRight();
			salida= "se movio a la izquierda";
           }
         else if (direction.image.equals( "around"))
         {
			world.turnRight();
			world.turnRight();
			salida= "se movio alrededor";
           }
         else {
           throw new Error ( "Direccion incorrecta" +direction.image);
           }  
       }
    }
    
    void face():
    { Token orientation;}
    {
      < face >":"orientation= < VARIABLE >";"
      {
        try {
			world.changefacing(orientation.image);

          }
        catch(NumberFormatException ee)
		  {
			throw new Error ( "Orientacion incorrecta" );
			
		    }  
          
       }
    }
    void put() :
    { int n;
      Token object;}
    {
		< put >":"	n = num()","   (object=< BALLOONS >|object=< CHIPS >)";"
		{
		  if (object.image.equals("Balloons"))
		  {
		    for ( int i=0; i<n;i++)
			{
			 world.putBalloon();}
		    }
		  else if (object.image.equals("Chips"))
		  {
		    for ( int i=0; i<n;i++)
			{
			 world.putChip();}
		    }
		  else {
			throw new Error ( "Objeto incorrecto" );
		    }  
		}
      }
    void pick() :
    { int n;
      Token object;}
    {
		< pick >":"	n = num()","   (object=< BALLOONS >|object=< CHIPS >)";"
		{
		  if (object.image.equals("Balloons"))
		  {
		    for ( int i=0; i<n;i++)
			{
			 world.pickupBalloon();}
		    }
		  else if (object.image.equals("Chips"))
		  {
		    for ( int i=0; i<n;i++)
			{
			 world.pickupChip();}
		    }
		  else {
			throw new Error ( "Objeto incorrecto" );
		    }  
		}
      }
void jumpToThe()throws Error:
	{
	  int x ;
	  Token d;
	  }
	{
	  <jumpToThe >":" x=num()","d= < VARIABLE > ";"
	  {
	    if (d.image.equals("right"))
	    {
			world.turnRight();
			world.moveForward(x, true);
	    }
	    else if (d.image.equals("left"))
	    {
			world.turnRight();
			world.turnRight();
			world.turnRight();
			world.moveForward(x, true);
	    }
	    else if (d.image.equals("back"))
	    {
			world.turnRight();
			world.turnRight();
			world.moveForward(x , true);
	    }

		else if (d.image.equals("front"))
	    {
			world.moveForward(x, true);
	  	}
	  	else
	  	{
	  	  	throw new Error("Orientation does not exist!");
	  	}
	  }
	 
	}
	

	void moveInDir() throws Error:
	{
	 Token direct;
	 int n;
	 }
	 {
	   < moveInDir >":"n=num()"," direct = < VARIABLE> ";"
	   {
	     if (direct.image.equals("North"))
	     {
	      	 if(world.getFacing() == 0)
	      	 {
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 1)
	      	 {
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 2)
	      	 {
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 3)
	      	 {
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	
	      	 
	     }
	     else if (direct.image.equals("South"))
	     {
	      	 if(world.getFacing() == 0)
	      	 {
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 1)
	      	 {
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 2)
	      	 {
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 3)
	      	 {
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }	 
	     }
	     else if (direct.image.equals("West"))
	     {
	      	 if(world.getFacing() == 0)
	      	 {
	      	   	world.turnRight();
	      	   	world.turnRight();
	      	   	world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 1)
	      	 {
	      	   world.turnRight();
	      	   
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 2)
	      	 {
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 3)
	      	 {	      	
	      	   world.moveForward(n,false);
	      	 }	 
	     }
	     else if (direct.image.equals("East"))
	     {
	      	 if(world.getFacing() == 0)
	      	 {
	      	   	world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 1)
	      	 {
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.turnRight();
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 2)
	      	 {	      	
	      	   world.moveForward(n,false);
	      	 }
	      	 else if(world.getFacing() == 3)
	      	 {
	      	   world.turnRight();
	      	   world.turnRight();	      	
	      	   world.moveForward(n,false);
	      	 }
	   		 
	     }
	     else
   		{
   		  throw new Error("Cardinal direction does not exist!");
   		}		
	   }
	 }

	   
	void moveToThe()throws Error:{ 	  
	  int x ;
	  Token d;
	  }
	{
	  <moveToThe >":" x=num()","d= < VARIABLE > ";"
	  {
	    if (d.image.equals("right"))
	    {
			world.turnRight();
			world.moveForward(x, false);
	    }
	    else if (d.image.equals("left"))
	    {
			world.turnRight();
			world.turnRight();
			world.turnRight();
			world.moveForward(x, false);
	    }
	    else if (d.image.equals("back"))
	    {
			world.turnRight();
			world.turnRight();
			world.moveForward(x , false);
	    }

		else if (d.image.equals("front"))
	    {
			world.moveForward(x, false);
	  	}
	  	else
	  	{
	  	  	throw new Error("Orientation does not exist!");
	  	}
	  	
	  }
	 
	}
	
	         

    int num() throws Error:
     {
		int total=1;
		
      }
     {
		< NUM >
		{
		  try {
				total= Integer.parseInt(token.image);
		    }
		  catch(NumberFormatException ee)
		  {
			throw new Error ( "Number out of bounds: "+token.image+ " !!" );
		    }
		  return total;
		}
       }
		