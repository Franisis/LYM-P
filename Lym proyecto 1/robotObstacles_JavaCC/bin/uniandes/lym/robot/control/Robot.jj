/**
 * Proyecto 1
 *
 * Michael Dylan Blanquicett
 * Pedro Luis Lobato
 *
 */options{
  LOOKAHEAD=1;
  ignorecase=true;  static = true;}PARSER_BEGIN(Robot)package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.lang.Math;


public class Robot{
  private static RobotWorldDec world;
  private static HashMap<String, Integer> variable_value = new HashMap<String, Integer>(); 
  private static HashMap<String, ArrayList<Token>> function_command = new HashMap<String, ArrayList<Token>>();
  private static HashMap<String, ArrayList<Token>> function_param = new HashMap<String, ArrayList<Token>>();
  
  void setWorld(RobotWorld w)
  {
    world = (RobotWorldDec) w;
  }}PARSER_END(Robot)SKIP :{
  " "| "\r"| "\t"}TOKEN : /* Comands*/{
  < MOVE : "MOVE" >
 |< RIGHT : "RIGHT" >
 |< LEFT : "LEFT" >
 |< ROT : "ROTATE" >
 |< LOOK : "LOOK" >
 |< DROP : "DROP" >
 |< FREE : "FREE" >
 |< PICK : "PICK" >
 |< POP : "POP" >
 |< CHECK : "CHECK" >
 |< EDP : "BLOCKEDP" >
 |< NOP : "NOP" >
 |< BLOCK : "BLOCK" >
 |< REP : "REPEAT" >
 |< IF : "IF" >
 |< DEF : "DEFINE" >
 |< TO : "TO" >
 |< OUT : "OUTPUT" >
 |< END : "END" >}TOKEN : /* Variables */{  < INT : (["0"-"9"])+ >
| < DIR : ( "N" | "E" | "W" | "S" ) >
| < IDEN : (["a"-"z"])+ >
| < BAL : "B" >
| < CHIPS : "C" >
}

/*
(
)
[
]
,
!
:
*/


void move() : { Token n; int i = 0; }
{
  < MOVE > n = < INT >
  {
    if(world.facingNorth())
    {
      while (i < Integer.parseInt(n.image)) {
        world.up();
        i ++;
      }
    }
    else if(world.facingEast())
    {
      while (i < Integer.parseInt(n.image)) {
        world.right();
        i ++;
      }
    }
    else if(world.facingWest())
    {
      while (i < Integer.parseInt(n.image)) {
        world.left();
        i++;
      }
    }
    else
    {
      while (i < Integer.parseInt(n.image)) {
        world.down();
        i ++;
      }
    }
  }
}

void right() : { Token n; int i = 0; }
{
  < RIGHT > n = < INT >
  {
    while(i<Integer.parseInt(n.image)) {
      world.turnRight();
      i++;
    }
  }
  
}

void left() : { Token n; int i = 0; }
{
  < LEFT > n = < INT >
  {
    while(i<Integer.parseInt(n.image)) {
      world.turnRight();
      world.turnRight();
      world.turnRight();
      i++;
    }
  }
}

void rotate() : { Token n; int[] r_l = { 1,3 }; int i = 0; int j = 0; int randomDir; }
{
  < ROT > n = < INT >
  {
    randomDir = r_l[(int)Math.random()];
    
    while(i<Integer.parseInt(n.image)) {
      while(j<randomDir) {
        world.turnRight();
        j++;
      }
      i++;
    }
    
  } //ROTATE"); }
}

void look() : { Token token; }
{
  < LOOK >
  token = < DIR >
  {
    if(token.image.equals("N"))
	{
	  while(!world.facingNorth())
	  {
	    world.turnRight();
	  }
	}
	else if(token.image.equals("S"))
	{
	  while(!world.facingSouth())
	  {
	    world.turnRight();
	  }
	}
	else if(token.image.equals("E"))
	{
	  while(!world.facingEast())
	  {
	    world.turnRight();
	  }
	}
	else if(token.image.equals("W"))
	{
	  while(!world.facingWest())
	  {
	    world.turnRight();
	  }
	}
  } 
}

void drop() : { Token n; int i = 0; }
{
  < DROP > n = < INT >
  {
    while (i < Integer.parseInt(n.image)) {
      world.putChip();
      i++;
    }
  } //DROP"); }
}
void pick() : { Token n; int i = 0; }
{
  < PICK > n = < INT >
  {
    while(i<Integer.parseInt(n.image)) {
      world.pickupChip();
      i++;
    }
  } //PICK"); }
}

void free() : { Token n; int i = 0; }
{
  < FREE > n = < INT >
  {
    while(i<Integer.parseInt(n.image)) {
      world.putBalloon();
      i++;
    }
  } //FREE"); }
}
void pop() : { Token n; int i = 0; }
{
  < POP > n = < INT >
  {
    while(i<Integer.parseInt(n.image)) {
      world.popBalloon();
      i++;
    }
  } //POP"); }
}

boolean check() : { Token token; String type; int cuantity; int actualNum; boolean toReturn; boolean c_b;}
{
  < CHECK >
  (
  token = < BAL > { c_b = true; }|
  token = < CHIPS > { c_b = false; }
  ) { type = token.image; }
  token = < INT > { cuantity = Integer.parseInt(token.image); }
  {
    if (c_b) {
      actualNum = world.countBalloons();
      toReturn = (actualNum == cuantity);
    } else {
      if(cuantity <= 1)
      {
        toReturn = world.chipExists();
      } else {
        throw new Error("No pueden haber mas de un chip en la misma posicion");
      }
    }
  }
   //CHECK"); }
  {
    return toReturn;
  }
}

boolean blockedPos() : { boolean toReturn = false; }
{
  < EDP >
  {
    Point actual = world.getPosition();
    int x = actual.x;
    int y = actual.y;
    
    if(world.facingNorth()) {
      toReturn = (world.isUp() || world.isBlocked(new Point(x,y+1)));
    }
    else if(world.facingSouth()) {
      toReturn = (world.isDown() || world.isBlocked(new Point(x,y-1)));
	}
	 else if(world.facingEast()) {
      toReturn = (world.isLeft() || world.isBlocked(new Point(x-1,y)));
    }
     else if(world.facingWest()) {
      toReturn = (world.isRight() || world.isBlocked(new Point(x+1,y)));
    }
  }
  //BLOCKEDP"); }
  {
    return toReturn; 
  }
}

void nothing() : { }
{
  < NOP >
  //NOP"); }
}

void block(StringBuffer sistema) : { }
{
  "("< BLOCK > //BLOCK"); }
   (command( sistema ))+")"
  
}

void repeat(StringBuffer sistema) : { Token n;}
{
  < REP >//REPEAT"); }
   n = < INT > "["command(sistema)"]"
  {//No estoy seguro
    int x = 1;
    while (x < Integer.parseInt(n.image)) {
      command(sistema);
      x++;
    }
  }
}

void if_stmt() : { boolean cond = false; }
{
  < IF >//IF"); }
   cond = logical() "["
  {
    if(!cond) {
      while(!token.image.equals("]")) {
        token = getNextToken();
      }
    }
  }
  "]"
}

void def() : { Token token; String varName; int varVal; }
{
  < DEF >
  token = < IDEN > { varName = token.image; }
  token = < INT > { varVal = Integer.parseInt(token.image); }
  {
    if(!variable_value.containsKey(varName)) {
      variable_value.put(varName, varVal);
    } else {
      throw new Error("La variable " + varName + " ya ha sido definida previamente");
    }
  } //DEFINE"); }
}

void function(StringBuffer sistema) : { Token token; String functName; ArrayList< String > args; }
{
  < TO > //CREATION OF FUNCTION"); }
  token = < IDEN > { functName = token.image; }
  args = param() {  }
  < OUT > (command(sistema))+ < END >
}

void useFunction() : { Token token; }
{
  token = < IDEN > //USE OF FUNCTION"); }
  {
    if(function_param.containsKey(token.image)) {
      
    } else {
      throw new Error("La funcion " + token.image + " no ha sido definida");
    }
  }
}

//n = numValue() - > t = < INT >; Integer.parseInt(t.image);
int numValue() : { Token t; int value; }
{
  t = < INT > { value = Integer.parseInt(t.image); }
| t = < IDEN >
  { if(variable_value.containsKey(t.image)) {
    value = variable_value.get(t.image);
    } else {
    throw new Error("La variable " + t.image + " no ha sido definida");
    }
  }
  {
  return value;
  }
}

boolean logical() : { }
{
  check() { return check(); }
| blockedPos() { return blockedPos(); }
| "!"logical()
}

ArrayList< String > param() : { Token token; ArrayList< String > params = new ArrayList< String >(); }
{
  (    token=":"< IDEN >
  {
    params.add(token.image);
  }
  )*
  {
    return params;
  }
}

boolean command( StringBuffer sistema ) : { String salida; }
{
  (
    move(){ salida = "Comando MOVE"; }
  | right(){ salida = "Comando RIGHT"; }
  | left(){ salida = "Comando LEFT"; }
  | rotate(){ salida = "Comando ROTATE"; }
  | look(){ salida = "Comando LOOK"; }//
  | drop(){ salida = "Comando DROP"; }
  | free(){ salida = "Comando FREE"; }
  | pick(){ salida = "Comando PICK"; }
  | pop(){ salida = "Comando POP"; }
  | check(){ salida = "Comando CHECK"; }//
  | blockedPos(){ salida = "Comando BLOCKEDP"; }//
  | nothing(){ salida = "Comando NOP"; }//
  | block(sistema){ salida = "Comando BLOCK"; }
  | repeat(sistema){ salida = "Comando REPEAT"; }
  | if_stmt(){ salida = "Comando IF"; }//
  | def(){ salida = "Comando DEFINE"; }//
  | function(sistema){ salida = "Comando FUNCTION CREATION"; }
  | useFunction(){ salida = "Comando FUNCTION USE"; }
  )
  (
    < EOF > | "\n"  ) { sistema.append(salida); return true; }
| (
    < EOF > | "\n"
  ) { return false; }
}